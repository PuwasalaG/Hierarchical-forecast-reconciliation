th2[is.na(th2)] <- 0
condirect <- as.vector(as.numeric(RVM$CondDistr$direct))
conindirect <- as.vector(as.numeric(RVM$CondDistr$indirect))
maxmat <- as.vector(RVM$MaxMat)
matri <- as.vector(RVM$Matrix)
matri[is.na(matri)] <- 0
maxmat[is.na(maxmat)] <- 0
condirect[is.na(condirect)] <- 0
conindirect[is.na(conindirect)] <- 0
out <- rep(0, sum(posParams[lower.tri(posParams, diag = FALSE)]) + sum(w1 == 2))
out <- .C("VineLogLikRvineGradient",
as.integer(T),
as.integer(d),
as.integer(w1),
as.integer(maxmat),
as.integer(matri),
as.integer(condirect),
as.integer(conindirect),
as.double(th),
as.double(th2),
as.double(data),
as.double(out),
as.double(ll),
as.double(vv),
as.double(vv2),
as.integer(as.vector(posParams)),
PACKAGE = 'VineCopula')
data()
args <- preproc(c(as.list(environment()), call = match.call()),
check_data,
remove_nas,
check_if_01,
check_RVMs,
prep_RVMs,
na.txt = " Only complete observations are used.")
list2env(args, environment())
if (any(!(RVM$family %in% c(0, 1:6, 13, 14, 16, 23, 24, 26, 33, 34, 36))))
stop("Copula family not implemented.")
d <- dim(data)[2]
T <- dim(data)[1]
n <- d
N <- T
o <- diag(RVM$Matrix)
if (any(o != length(o):1)) {
oldRVM <- RVM
RVM <- normalizeRVineMatrix(RVM)
data <- data[, o[length(o):1]]
}
if (any(is.na(start.V))) {
loglik <- RVineLogLik(data, RVM, par = par, par2 = par2, separate = TRUE)
V <- loglik$V
} else {
V <- start.V
V$value[V$value %in% c(NA, NaN, -Inf)] <- -1e+10
if (any(is.na(V$value)))
message("NA in LogL call")
}
ll <- as.vector(V$value)
vv <- as.vector(V$direct)
vv2 <- as.vector(V$indirect)
w1 <- as.vector(RVM$family)
w1[is.na(w1)] <- 0
th <- as.vector(par)
th[is.na(th)] <- 0
th2 <- as.vector(par2)
th2[is.na(th2)] <- 0
condirect <- as.vector(as.numeric(RVM$CondDistr$direct))
conindirect <- as.vector(as.numeric(RVM$CondDistr$indirect))
maxmat <- as.vector(RVM$MaxMat)
matri <- as.vector(RVM$Matrix)
matri[is.na(matri)] <- 0
maxmat[is.na(maxmat)] <- 0
condirect[is.na(condirect)] <- 0
conindirect[is.na(conindirect)] <- 0
out <- rep(0, sum(posParams[lower.tri(posParams, diag = FALSE)]) + sum(w1 == 2))
out <- .C("VineLogLikRvineGradient",
as.integer(T),
as.integer(d),
as.integer(w1),
as.integer(maxmat),
as.integer(matri),
as.integer(condirect),
as.integer(conindirect),
as.double(th),
as.double(th2),
as.double(data),
as.double(out),
as.double(ll),
as.double(vv),
as.double(vv2),
as.integer(as.vector(posParams)),
PACKAGE = 'VineCopula')
data<-simdata
args <- preproc(c(as.list(environment()), call = match.call()),
check_data,
remove_nas,
check_if_01,
check_RVMs,
prep_RVMs,
na.txt = " Only complete observations are used.")
list2env(args, environment())
if (any(!(RVM$family %in% c(0, 1:6, 13, 14, 16, 23, 24, 26, 33, 34, 36))))
stop("Copula family not implemented.")
d <- dim(data)[2]
T <- dim(data)[1]
n <- d
N <- T
o <- diag(RVM$Matrix)
if (any(o != length(o):1)) {
oldRVM <- RVM
RVM <- normalizeRVineMatrix(RVM)
data <- data[, o[length(o):1]]
}
if (any(is.na(start.V))) {
loglik <- RVineLogLik(data, RVM, par = par, par2 = par2, separate = TRUE)
V <- loglik$V
} else {
V <- start.V
V$value[V$value %in% c(NA, NaN, -Inf)] <- -1e+10
if (any(is.na(V$value)))
message("NA in LogL call")
}
ll <- as.vector(V$value)
vv <- as.vector(V$direct)
vv2 <- as.vector(V$indirect)
w1 <- as.vector(RVM$family)
w1[is.na(w1)] <- 0
th <- as.vector(par)
th[is.na(th)] <- 0
th2 <- as.vector(par2)
th2[is.na(th2)] <- 0
condirect <- as.vector(as.numeric(RVM$CondDistr$direct))
conindirect <- as.vector(as.numeric(RVM$CondDistr$indirect))
maxmat <- as.vector(RVM$MaxMat)
matri <- as.vector(RVM$Matrix)
matri[is.na(matri)] <- 0
maxmat[is.na(maxmat)] <- 0
condirect[is.na(condirect)] <- 0
conindirect[is.na(conindirect)] <- 0
out <- rep(0, sum(posParams[lower.tri(posParams, diag = FALSE)]) + sum(w1 == 2))
out <- .C("VineLogLikRvineGradient",
as.integer(T),
as.integer(d),
as.integer(w1),
as.integer(maxmat),
as.integer(matri),
as.integer(condirect),
as.integer(conindirect),
as.double(th),
as.double(th2),
as.double(data),
as.double(out),
as.double(ll),
as.double(vv),
as.double(vv2),
as.integer(as.vector(posParams)),
PACKAGE = 'VineCopula')
posParams = (RVM$family > 0)
args <- preproc(c(as.list(environment()), call = match.call()),
check_data,
remove_nas,
check_if_01,
check_RVMs,
prep_RVMs,
na.txt = " Only complete observations are used.")
list2env(args, environment())
if (any(!(RVM$family %in% c(0, 1:6, 13, 14, 16, 23, 24, 26, 33, 34, 36))))
stop("Copula family not implemented.")
d <- dim(data)[2]
T <- dim(data)[1]
n <- d
N <- T
o <- diag(RVM$Matrix)
if (any(o != length(o):1)) {
oldRVM <- RVM
RVM <- normalizeRVineMatrix(RVM)
data <- data[, o[length(o):1]]
}
if (any(is.na(start.V))) {
loglik <- RVineLogLik(data, RVM, par = par, par2 = par2, separate = TRUE)
V <- loglik$V
} else {
V <- start.V
V$value[V$value %in% c(NA, NaN, -Inf)] <- -1e+10
if (any(is.na(V$value)))
message("NA in LogL call")
}
ll <- as.vector(V$value)
vv <- as.vector(V$direct)
vv2 <- as.vector(V$indirect)
w1 <- as.vector(RVM$family)
w1[is.na(w1)] <- 0
th <- as.vector(par)
th[is.na(th)] <- 0
th2 <- as.vector(par2)
th2[is.na(th2)] <- 0
condirect <- as.vector(as.numeric(RVM$CondDistr$direct))
conindirect <- as.vector(as.numeric(RVM$CondDistr$indirect))
maxmat <- as.vector(RVM$MaxMat)
matri <- as.vector(RVM$Matrix)
matri[is.na(matri)] <- 0
maxmat[is.na(maxmat)] <- 0
condirect[is.na(condirect)] <- 0
conindirect[is.na(conindirect)] <- 0
out <- rep(0, sum(posParams[lower.tri(posParams, diag = FALSE)]) + sum(w1 == 2))
out <- .C("VineLogLikRvineGradient",
as.integer(T),
as.integer(d),
as.integer(w1),
as.integer(maxmat),
as.integer(matri),
as.integer(condirect),
as.integer(conindirect),
as.double(th),
as.double(th2),
as.double(data),
as.double(out),
as.double(ll),
as.double(vv),
as.double(vv2),
as.integer(as.vector(posParams)),
PACKAGE = 'VineCopula')
start.V<-NA
args <- preproc(c(as.list(environment()), call = match.call()),
check_data,
remove_nas,
check_if_01,
check_RVMs,
prep_RVMs,
na.txt = " Only complete observations are used.")
list2env(args, environment())
if (any(!(RVM$family %in% c(0, 1:6, 13, 14, 16, 23, 24, 26, 33, 34, 36))))
stop("Copula family not implemented.")
d <- dim(data)[2]
T <- dim(data)[1]
n <- d
N <- T
o <- diag(RVM$Matrix)
if (any(o != length(o):1)) {
oldRVM <- RVM
RVM <- normalizeRVineMatrix(RVM)
data <- data[, o[length(o):1]]
}
if (any(is.na(start.V))) {
loglik <- RVineLogLik(data, RVM, par = par, par2 = par2, separate = TRUE)
V <- loglik$V
} else {
V <- start.V
V$value[V$value %in% c(NA, NaN, -Inf)] <- -1e+10
if (any(is.na(V$value)))
message("NA in LogL call")
}
ll <- as.vector(V$value)
vv <- as.vector(V$direct)
vv2 <- as.vector(V$indirect)
w1 <- as.vector(RVM$family)
w1[is.na(w1)] <- 0
th <- as.vector(par)
th[is.na(th)] <- 0
th2 <- as.vector(par2)
th2[is.na(th2)] <- 0
condirect <- as.vector(as.numeric(RVM$CondDistr$direct))
conindirect <- as.vector(as.numeric(RVM$CondDistr$indirect))
maxmat <- as.vector(RVM$MaxMat)
matri <- as.vector(RVM$Matrix)
matri[is.na(matri)] <- 0
maxmat[is.na(maxmat)] <- 0
condirect[is.na(condirect)] <- 0
conindirect[is.na(conindirect)] <- 0
out <- rep(0, sum(posParams[lower.tri(posParams, diag = FALSE)]) + sum(w1 == 2))
out <- .C("VineLogLikRvineGradient",
as.integer(T),
as.integer(d),
as.integer(w1),
as.integer(maxmat),
as.integer(matri),
as.integer(condirect),
as.integer(conindirect),
as.double(th),
as.double(th2),
as.double(data),
as.double(out),
as.double(ll),
as.double(vv),
as.double(vv2),
as.integer(as.vector(posParams)),
PACKAGE = 'VineCopula')
out
out[[11]]
dim(data)
7500/300
define 5-dimensional R-vine tree structure matrix
Matrix <- c(5, 2, 3, 1, 4,
0, 2, 3, 4, 1,
0, 0, 3, 4, 1,
0, 0, 0, 4, 1,
0, 0, 0, 0, 1)
Matrix <- matrix(Matrix, 5, 5)
# define R-vine pair-copula family matrix
family <- c(0, 1, 3, 4, 4,
0, 0, 3, 4, 1,
0, 0, 0, 4, 1,
0, 0, 0, 0, 3,
0, 0, 0, 0, 0)
family <- matrix(family, 5, 5)
# define R-vine pair-copula parameter matrix
par <- c(0, 0.2, 0.9, 1.5, 3.9,
0, 0, 1.1, 1.6, 0.9,
0, 0, 0, 1.9, 0.5,
0, 0, 0, 0, 4.8,
0, 0, 0, 0, 0)
par <- matrix(par, 5, 5)
# define second R-vine pair-copula parameter matrix
par2 <- matrix(0, 5, 5)
# define RVineMatrix object
RVM <- RVineMatrix(Matrix = Matrix, family = family,
par = par, par2 = par2,
names = c("V1", "V2", "V3", "V4", "V5"))
# simulate a sample of size 300 from the R-vine copula model
set.seed(123)
simdata <- RVineSim(300, RVM)
# compute the gradient of the first row of the data
out2 <- RVineGrad(simdata[1,], RVM)
out2$gradient
7500/10
out2 <- RVineGrad(simdata[1,], RVM)
out2
out2 <- RVineGrad(simdata[2,], RVM)
out2
out2 <- RVineGrad(simdata, RVM)
out2
n<-100
d<-2
x<-matrix(runif(n*d),n,d)
d<-dist(x)
summary(d)
source('~/.active-rstudio-document', echo=TRUE)
summary(d)
n<-100
d<-100
x<-matrix(runif(n*d),n,d)
d<-dist(x)
summary(d)
Sys.setlocale(category = "LC_ALL",locale = "Chinese")
Sys.setlocale(category = "LC_ALL",locale = "Chinese[1]")
read('Documents/Misc/Huli/test.txt')
read.csv('Documents/Misc/Huli/test.txt')
read.csv('Documents/Misc/Huli/test.txt')
read.csv('Documents/Misc/Huli/test.txt')->a
read.csv('~/Documents/Misc/Huli/test.txt')->a
Sys.getlocale
Sys.getlocale()
?Sys.setlocale
Sys.setlocale(category = "LC_ALL",locale = "ch")
Sys.setlocale(category = "LC_ALL",locale = "zh")
Sys.setlocale(category = "LC_ALL",locale = "el")
Sys.setlocale(category = "LC_ALL",locale = "gr")
Sys.setlocale(category = "LC_ALL",locale = "ch_CH.UTF-8")
Sys.setlocale(category = "LC_ALL",locale = "zh_ZH.UTF-8")
Sys.setlocale(category = "LC_ALL",locale = "zh_ZH.utf8")
Sys.getlocale()
Sys.setlocale(category = "LC_ALL",locale = "ch_CH.utf8")
Sys.setlocale(category = "LC_ALL",locale = "ch_CH.UTF-8")
Sys.setlocale(category = "LC_ALL",locale = "de_DE.utf8")
Sys.setlocale(category = "LC_ALL",locale = "de_DE.UTF-8")
Sys.setlocale(category = "LC_ALL",locale = "de_DE")
Sys.getlocale()
Sys.setlocale(category = "LC_ALL",locale = "zh_CN")
Sys.setlocale(category = "LC_ALL",locale = "zh_CN.utf8")
read.csv('~/Documents/Misc/Huli/test.txt')->a
read.csv('~/Documents/Misc/Huli/test.txt',fileEncoding = 'iso-8859-1')->a
a
read.csv('Documents/Misc/Huli/testutf8.txt')
str(a)
read.csv('Documents/Misc/Huli/testutf8.txt')->a
str(a)
read.csv('Documents/Misc/Huli/testutf8.txt',stringsAsFactors = FALSE)->a
a
View(a)
a[1,3]
a[1,3]==女
a[1,3]=’=女‘
a[1,3]==’女‘
Sys.getlocale()
a[1,3]==”我“
a[1,3]=”我“
a[1,3]='我'
a
a[1,3]
View(a)
a[1,3]=='女'
a[2,3]=='女'
Sys.getlocale()
Sys.getlocale()
?plot.new
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot.new()
plot.window(xlim = c(-1,5),ylim = c(-1,5))
lines(-1,0,5,0,lty=2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("latex2exp")
install.packages("tikzDevice")
library(latex2exp)
library(tikzDevice)
s<-c(2,1)
r<-c(1,1)
plot.new()
plot.window(xlim = c(-1,5),ylim = c(-1,5))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?TeX
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?TeX
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
setwd("~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs")
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
?text
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
tikzTest("$\\mathfrak{s}$")
?tikzDevice
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
options(tikzLatexPackages = 'amsfonts')
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
options(tikzLatexPackages = c('amsmath','bm','amsfonts'))
tikz('out.tex')
plot.new()
plot.window(xlim = c(-1,5),ylim = c(-1,5))
lines(c(0,0),c(-1,5),lty=2)
lines(c(-1,5),c(0,0),lty=2)
arrows(0,0,2,1)
text(2,1,"$\\bm{s}$",pos=4)
tikzTest("$\\bm{s}$")
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
tikzTest("$\\bm{s}$")
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
tikzTest("$\\bm{s}$")
getOption("tikzDefaultEngine")
getOption("tikzLatexPackages")
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
tikzTest()
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
options(tikzLatexPackages=c(getOption( "tikzLatexPackages" ),"\\usepackage{amsfonts}","\\usepackage{bm}"))
getOption("tikzLatexPackages")
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
getOption("tikzLatexPackages")
tikzTest()
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
tikzTest()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
dev.off()
dev.off()
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
tikzTest()
dev.off()
dev.off()
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
source('~/Documents/Research/ProbabilsticReconciliationTheory/Probabilistic-Forecast-in-Hierarchical-Time-Series/Figs/makefig.r', echo=TRUE)
